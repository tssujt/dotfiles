" ==========================================
" bundle 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(the_silver_searcher)
" python dependence:   pep8, pyflake

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off

" ################### 插件管理 ###################

" inspired by spf13, 自定义需要的插件集合
if !exists('g:bundle_groups')
    let g:bundle_groups=['python', 'javascript', 'markdown', 'html', 'css', 'tmux', 'beta']
endif

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处

" ale
Plug 'w0rp/ale'

" Vim HardTime
Plug 'takac/vim-hardtime'

" Group dependencies, vim-snippets depends on ultisnips
" 代码片段快速插入 (snippets中,是代码片段资源,需要学习)
" Snippets are separated from the engine. Add this if you want them:
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" auto complete
" 代码自动补全
" 自动补全单引号，双引号等
Plug 'Raimondi/delimitMate'
" 自动补全html/xml标签
Plug 'docunext/closetag.vim', { 'for': ['html', 'xml'] }

" quick edit
" 快速注释
Plug 'scrooloose/nerdcommenter'


" 快速加入修改环绕字符
" for repeat -> enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'
" trailingwhitespace
" 快速去行尾空格 [, + <Space>]
Plug 'bronson/vim-trailing-whitespace'
" easyalign
" 快速赋值语句对齐
Plug 'junegunn/vim-easy-align'

" quick movement
" easymotion
" 更高效的移动 [,, + w/fx/h/j/k/l]
Plug 'Lokaltog/vim-easymotion'

" 更高效的行内移动, f/F/t/T, 才触发
" quickscope
Plug 'unblevable/quick-scope'

Plug 'vim-scripts/matchit.zip'
" signature
" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
" m/        list all marks
" m.        add new mark just follow previous mark
Plug 'kshenoy/vim-signature'

" quick selection and edit
" expandregion
" 选中区块
Plug 'terryma/vim-expand-region'
" 多光标选中编辑
" multiplecursors
Plug 'terryma/vim-multiple-cursors'

" quick locate file or function
" 文件搜索
" change to https://github.com/ctrlpvim/ctrlp.vim
" ctrlp ctrlpfunky
Plug 'ctrlpvim/ctrlp.vim' | Plug 'tacahiroy/ctrlp-funky'
" ctrlsf
" 类似sublimetext的搜索
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
Plug 'dyng/ctrlsf.vim'
" incsearch
" Plug 'haya14busa/incsearch.vim'
" map /  <Plug>(incsearch-forward)
" map ?  <Plug>(incsearch-backward)
" map g/ <Plug>(incsearch-stay)
"
" ag
Plug 'mileszs/ack.vim'

" Plug 'autozimu/LanguageClient-neovim', {
    " \ 'branch': 'next',
    " \ 'do': 'bash install.sh',
    " \ }

Plug 'neovim/nvim-lspconfig'
Plug 'Shougo/deoplete-lsp'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" quick run
" quickrun
Plug 'thinca/vim-quickrun'

" git
" fugitive
Plug 'tpope/vim-fugitive'
" gitgutter
Plug 'airblade/vim-gitgutter'


" gundo
" edit history, 可以查看回到某个历史状态
Plug 'sjl/gundo.vim'

" view
" airline
" 状态栏增强展示
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" rainbow_parentheses
" 括号显示增强
Plug 'kien/rainbow_parentheses.vim'
" 主题 solarized
" solarized
Plug 'altercation/vim-colors-solarized'
" molokai
" 主题 molokai
Plug 'tomasr/molokai'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'KeitaNakamura/neodark.vim'

let g:neodark#background = '#202020'
let g:neodark#use_256color = 1
let g:neodark#solid_vertsplit = 1

" nav
" nerdtree nerdtreetabs
Plug 'scrooloose/nerdtree' | Plug 'jistr/vim-nerdtree-tabs'
Plug 'Xuyuanp/nerdtree-git-plugin'
" ctrlspace
Plug 'vim-ctrlspace/vim-ctrlspace'
" tagbar
Plug 'majutsushi/tagbar'

" text object
" 支持自定义文本对象
Plug 'kana/vim-textobj-user'
" 增加行文本对象: l   dal yal cil
Plug 'kana/vim-textobj-line'
" 增加文件文本对象: e   dae yae cie
Plug 'kana/vim-textobj-entire'
" 增加缩进文本对象: i   dai yai cii - 相同缩进属于同一块
Plug 'kana/vim-textobj-indent'

if count(g:bundle_groups, 'python')
    " python
    Plug 'hynek/vim-python-pep8-indent'
    Plug 'darrikonn/vim-isort'
    Plug 'psf/black', { 'tag': '19.10b0' }
endif

" Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}
Plug 'sheerun/vim-polyglot'

if count(g:bundle_groups, 'tmux')
    " tmux
    " For tmux navigator Ctrl-hjkl
    Plug 'christoomey/vim-tmux-navigator'
endif

if count(g:bundle_groups, 'shell')
    Plug 'Shougo/vimshell.vim'
endif

if count(g:bundle_groups, 'json')
    " json
    Plug 'elzr/vim-json', {'for': 'json'}
endif

if count(g:bundle_groups, 'css')
    " css
    " not work in iterm2 which termianl selection is not xterm-256, and it slow
    " Plug 'ap/vim-css-color'

    " 这个有坑, see issue https://github.com/wklken/k-vim/issues/49
    " Plug 'gorodinskiy/vim-coloresque'
    " Plug 'lilydjwg/colorizer'
endif

if count(g:bundle_groups, 'less')
    " ###### vim.less : less 自动更新##########
    Plug 'groenewege/vim-less'
    " autocmd BufWritePost *.less :!lessc % > %:p:r.css
endif

if count(g:bundle_groups, 'html')
    " ###### emmet HTML complete #########
    " Plug 'mattn/emmet-vim'
endif

" this is just for beta version
if count(g:bundle_groups, 'beta')
    " indent
    Plug 'nathanaelkane/vim-indent-guides'
    " <leader>ig to trigger
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_auto_colors = 1
    " autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=black
    " autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black

    " Plug 'robbles/logstash.vim'
    Plug 'ryanoasis/vim-devicons'
    " Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
    Plug 'ekalinin/dockerfile.vim'

    Plug 'ConradIrwin/vim-bracketed-paste'
    Plug 'roxma/vim-paste-easy'
endif

" Add plugins to &runtimepath
call plug#end()


" ################### 基础 ######################

" ale {{{
    let g:ale_linters = {
        \   'python': ['flake8'],
        \   'javascript': ['eslint'],
        \   'sh': ['language_server'],
        \}
    let g:ale_linters_explicit = 1

    let g:ale_fixers = {
        \   '*': ['remove_trailing_lines', 'trim_whitespace'],
        \   'python': ['autopep8', 'flake']
        \}

    let g:ale_python_flake8_use_global = 1
    " E501 -> 120 chars
    let g:ale_python_flake8_args="--ignore=E203,E266,E501,W503 --max-line-length=120"
    " --ignore=E225,E124,E712,E116

    let g:ale_sign_error = '>>'
    let g:ale_sign_warning = '>'

    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

    nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
    nmap <silent> <Leader>en <Plug>(ale_next_wrap)

    nnoremap <silent> <Leader>ec :ALEToggle<CR>

    " toggle quickfix list
    function! ToggleErrors()
        let old_last_winnr = winnr('$')
        lclose
        if old_last_winnr == winnr('$')
            " Nothing was closed, open syntastic_error location panel
            lopen
        endif
    endfunction
    nnoremap <Leader>s :call ToggleErrors()<cr>

    let g:ale_set_highlights = 1
    highlight clear ALEErrorSign
    highlight clear ALEWarningSign
" }}}

" hardtime {{{
    let g:hardtime_default_on = 1

    let g:hardtime_timeout = 2000

    let g:hardtime_showmsg = 1

    let g:hardtime_ignore_buffer_patterns = [ "NERD.*", "Tagbar.*" ]
    let g:hardtime_ignore_quickfix = 1
    let g:hardtime_allow_different_key = 1
    let g:hardtime_maxcount = 10
" }}}

" fzf {{{
    let g:fzf_action = {
        \ 'ctrl-t': 'tab split',
        \ 'ctrl-x': 'split',
        \ 'ctrl-v': 'vsplit'
        \ }
" }}}

" semshi {{{
    " let g:semshi#active = 1

    " hi semshiLocal           ctermfg=209 guifg=#ff875f
    " hi semshiGlobal          ctermfg=214 guifg=#ffaf00
    " hi semshiImported        ctermfg=214 guifg=#ffaf00 cterm=bold gui=bold
    " hi semshiParameter       ctermfg=75  guifg=#5fafff
    " hi semshiParameterUnused ctermfg=117 guifg=#87d7ff cterm=underline gui=underline
    " hi semshiFree            ctermfg=218 guifg=#ffafd7
    " hi semshiBuiltin         ctermfg=207 guifg=#8888C6
    " hi semshiAttribute       ctermfg=49  guifg=#00ffaf
    " hi semshiSelf            ctermfg=249 guifg=#94558D
    " hi semshiUnresolved      ctermfg=226 guifg=#ffff00 cterm=underline gui=underline
    " hi semshiSelected        ctermfg=231 guifg=#ffffff ctermbg=161 guibg=#d7005f

    " hi semshiErrorSign       ctermfg=231 guifg=#ffffff ctermbg=160 guibg=#d70000
    " hi semshiErrorChar       ctermfg=231 guifg=#ffffff ctermbg=160 guibg=#d70000
    " sign define semshiError text=E> texthl=semshiErrorSign
" }}}

" black {{{
    let g:black_skip_string_normalization = 1
    autocmd BufWritePre *.py execute ':silent Black'
    autocmd BufWritePost *.go !gofmt -w %
" }}}

" isort {{{
    " CWD to the root of git repo when opening file inside repo
    let g:gitroot=system("git rev-parse --show-toplevel")
    let g:is_gitrepo = v:shell_error == 0
    silent! cd `=gitroot`
    autocmd BufWritePre *.py execute ':Isort'
" }}}

" ################### 自动补全 ###################

set scl=no
nnoremap <silent> gd <cmd>vsplit <bar> lua vim.lsp.buf.definition()<CR>
nnoremap <silent> gp <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> <C-c>rr <cmd>lua vim.lsp.buf.rename()<CR>

" https://github.com/neovim/nvim-lsp#pyls
" https://www.xgithub.com/2019/11/14/neovim-nvim-lsp-common-configurations-for-neovim-language-servers/
lua << EOF
local nvim_lsp = require'nvim_lsp'
nvim_lsp.pyls.setup{
  settings = {
    pyls = {
      plugins = {
        pylint = {
          enabled = false,
          args = {'--disable=bare-except,wildcard-import,too-many-public-methods,redefined-outer-name,expression-not-assigned,redefined-builtin,subprocess-run-check,too-many-instance-attributes,import-outside-toplevel,broad-except,logging-not-lazy,too-many-return-statements,C0111,R0903,too-many-arguments,multiple-statements,too-many-statements,too-many-locals,invalid-name,fixme,logging-fstring-interpolation,line-too-long,no-member,inconsistent-return-statements,too-many-lines,unused-argument,no-self-use'},
        },
        pycodestyle = {
          enabled = true,
          ignore = {'E402', 'E501', 'E722', 'E731', 'E225', 'E203', 'E702', 'F811', 'F405', 'F403', 'W391', 'F401', 'W503', 'W504', 'W291'},
          addIgnore = {'E402', 'E501', 'E722', 'E731', 'E225', 'E203', 'E702', 'F811', 'F405', 'F403', 'W391', 'F401', 'W503', 'W504', 'W291'},
          maxLineLength = 200,
        },
        pyflakes = {
          enabled = false,
        }
      },
      rope = {
        ropeFolder = {'.'}
      }
    }
  }
}
nvim_lsp.gopls.setup{
  root_dir = nvim_lsp.util.root_pattern('.git');
}
EOF
" }

" LanguageClient {{{
    " let g:LanguageClient_rootMarkers = {
        " \ 'rust': ['Cargo.toml', '.git'],
        " \ 'python': ['lain.yaml', '.git'],
        " \ }

    " let g:LanguageClient_serverCommands = {
        " \ 'css': ['css-languageserver', '--stdio'],
        " \ 'lisp': ['cl-lsp', 'stdio'],
        " \ 'dockerfile': ['docker-langserver', '--stdio'],
        " \ 'html': ['html-languageserver', '--stdio'],
        " \ 'python': ['pyls', '-v',  '-v', '--log-file=/tmp/pyls.log'],
        " \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
        " \ 'scheme': [expand('~/Sources/guile-language-server/wrapper')],
        " \ 'sh': ['bash-language-server', 'start'],
        " \ 'vim': [expand('~/.yarn/bin/vim-language-server'), '--stdio'],
        " \ 'vue': ['vls'],
        " \ 'yaml': ['yaml-language-server', '--stdio'],
        " \ }

    " let $RUST_BACKTRACE = 'full'
    " let g:LanguageClient_loadSettings = 1 " Use an absolute configuration path if you want system-wide settings
    " let g:LanguageClient_settingsPath = expand('~/.config/nvim/settings.json')
    " let g:LanguageClient_hasSnippetSupport = 0
    " let g:LanguageClient_serverStderr = '/tmp/langserver.log'
    " let g:LanguageClient_loggingFile = '/tmp/langclient.log'
    " let g:LanguageClient_setLoggingLevel = 'DEBUG'
    " let g:LanguageClient_useVirtualText = "No"

    " let g:LanguageClient_selectionUI = "quickfix"
    " let g:LanguageClient_diagnosticsEnable = 0
    " let g:LanguageClient_diagnosticsList = "Disabled"
    " let g:LanguageClient_completionPreferTextEdit = 0

    " " 把Server的补全API提交给Vim
    " " 一般有deoplete就可以用了，加上一条以防万一。
    " set completefunc=LanguageClient#complete
    " " 把Server的格式化API提交给Vim
    " set formatexpr=LanguageClient_textDocument_rangeFormatting()

    " inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
    " inoremap <expr><S-tab> pumvisible() ? "\<c-p>" : "\<tab>"

    " function SetLSPShortcuts()
        " nnoremap <leader>ld :call LanguageClient#textDocument_definition({'gotoCmd': 'vsplit'})<CR>
        " nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
        " nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
        " nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
        " nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
        " nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
        " nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
        " nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
        " nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
        " nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
    " endfunction()

    " augroup LSP
      " autocmd!
      " autocmd FileType css,dockerfile,html,lisp,python,rust,sh,vim,vue,yaml call SetLSPShortcuts()
    " augroup END
" }}}

" deoplete {{{
    let g:deoplete#enable_at_startup = 1
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
        return deoplete#close_popup() . "\<CR>"
    endfunction
    " use tab / shift-tab to cycle through candidates
    inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
    inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
    call deoplete#custom#var('buffer', 'require_same_filetype', v:false)
    " call deoplete#custom#source('_', 'matchers', ['matcher_cpsm'])
    " call deoplete#custom#source('_', 'sorters', [])
    call deoplete#custom#source('_', 'matchers', ['matcher_full_fuzzy'])
    call deoplete#custom#option({
                \ 'auto_complete_delay': 0,
                \ 'auto_refresh_delay': 1,
                \ 'smart_case': v:true,
                \ 'async_timeout': 150,
                \ 'on_insert_enter': v:false,
                \ 'min_pattern_length': 1,
                \ 'profile': v:true,
                \ })

    call deoplete#enable_logging('DEBUG', '/tmp/deoplete.log')
    " call deoplete#custom#source('LanguageClient', 'is_debug_enabled', v:true)

    " see https://muunyblue.github.io/520bae6649b42ff5a3c8c58b7fcfc5a9.html
    call deoplete#custom#option('sources', {
        \ '_': ['file', 'around', 'buffer', 'ultisnips', 'lsp'],
        \ 'vue': ['file', 'around', 'ultisnips', 'lsp', 'buffer'],
        \ 'sh': ['file', 'around', 'ultisnips', 'buffer', 'lsp'],
        \ 'lua': ['file', 'around', 'ultisnips', 'buffer', 'lsp'],
        \ 'dockerfile': ['file', 'around', 'ultisnips', 'buffer', 'lsp'],
        \})
    " automatically close the scratch window
    " see https://gregjs.com/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/
    " autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
" }}}

" ultisnips {{{
    " let g:UltiSnipsExpandTrigger       = "<tab>"
    " let g:UltiSnipsJumpForwardTrigger  = "<tab>"
    " let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
    " let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
    " let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
    " " 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
    " " 进入对应filetype的snippets进行编辑
    " map <leader>us :UltiSnipsEdit<CR>

    " " ctrl+j/k 进行选择
    " func! g:JInYCM()
    "     if pumvisible()
    "         return "\<C-n>"
    "     else
    "         return "\<c-j>"
    "     endif
    " endfunction

    " func! g:KInYCM()
    "     if pumvisible()
    "         return "\<C-p>"
    "     else
    "         return "\<c-k>"
    "     endif
    " endfunction
    " inoremap <c-j> <c-r>=g:JInYCM()<cr>
    " au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
    " let g:UltiSnipsJumpBackwordTrigger = "<c-k>"
" }}}


" delimitMate {{{
    " for python docstring ",优化输入
    au FileType python let b:delimitMate_nesting_quotes = ['"']
    au FileType php let delimitMate_matchpairs = "(:),[:],{:}"
    " 关闭某些类型文件的自动补全
    "au FileType mail let b:delimitMate_autoclose = 0
" }}}


" closetag {{{
    let g:closetag_html_style=1
" }}}

" ################### 快速编码 ###################

" nerdcommenter {{{
    let g:NERDSpaceDelims=1
    let g:NERDAltDelims_python = 1
" }}}

" trailingwhitespace {{{
    map <leader><space> :FixWhitespace<cr>
" }}}

" easyalign {{{
    vmap <Leader>a <Plug>(EasyAlign)
    nmap <Leader>a <Plug>(EasyAlign)
    if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
    endif
    let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
    " Default:
    " If a delimiter is in a highlight group whose name matches any of the followings, it will be ignored.
    let g:easy_align_ignore_groups = ['Comment', 'String']
" }}}

" ################### 快速移动 ###################

" easymotion {{{
    let g:EasyMotion_smartcase = 1
    " let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
    map <Leader><Leader>h <Plug>(easymotion-linebackward)
    map <Leader><Leader>j <Plug>(easymotion-j)
    map <Leader><Leader>k <Plug>(easymotion-k)
    map <Leader><Leader>l <Plug>(easymotion-lineforward)
    " 重复上一次操作, 类似repeat插件, 很强大
    map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}


" quickscope {{{
    let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
    augroup MyQuickScope
      autocmd!
      autocmd FileType nerdtree,buffergator,tagbar,qf let b:qs_local_disable=1
    augroup END
    " macvim/gvim会有问题, 暂时注解
    " let g:qs_first_occurrence_highlight_color = '#afff5f' " gui vim
    " let g:qs_first_occurrence_highlight_color = 155       " terminal vim
    " let g:qs_second_occurrence_highlight_color = '#5fffff'  " gui vim
    " let g:qs_second_occurrence_highlight_color = 81         " terminal vim
" }}}

" ################### 快速选中 ###################

" expandregion {{{
    " map + <Plug>(expand_region_expand)
    " map _ <Plug>(expand_region_shrink)
    vmap v <Plug>(expand_region_expand)
    vmap V <Plug>(expand_region_shrink)
    " Extend the global default
    if exists("*expand_region#custom_text_objects")
        call expand_region#custom_text_objects({
        \ 'a]' :1,
        \ 'ab' :1,
        \ 'aB' :1,
        \ 'ii' :0,
        \ 'ai' :0,
        \ })
    endif

" }}}

" multiplecursors {{{
    let g:multi_cursor_use_default_mapping=0
    " Default mapping
    let g:multi_cursor_next_key='<C-m>'
    let g:multi_cursor_prev_key='<C-p>'
    let g:multi_cursor_skip_key='<C-x>'
    let g:multi_cursor_quit_key='<Esc>'
" }}}

" ################### 功能相关 ###################

" ctrlp ctrlpfunky{{{
    let g:ctrlp_map = '<leader>p'
    let g:ctrlp_cmd = 'CtrlP'
    map <leader>mru :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
        \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
        \ }
    let g:ctrlp_working_path_mode=0
    let g:ctrlp_match_window_bottom=1
    let g:ctrlp_max_height=15
    let g:ctrlp_match_window_reversed=0
    let g:ctrlp_mruf_max=500
    let g:ctrlp_follow_symlinks=1
    " 如果安装了ag, 使用ag
    noremap <Leader>c :Ack!<Space>
    noremap <Leader>a :Ack <cword><cr>
    if executable('ag')
    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
      let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    " ag is fast enough that CtrlP doesn't need to cache
    " let g:ctrlp_use_caching = 0
      let g:ackprg = 'rg --vimgrep --color never --column'
    " <Leader>c进行搜索，同时不自动打开第一个匹配的文件"
    " 高亮搜索关键词
      let g:ackhighlight = 1
    " 修改快速预览窗口高度为15
      let g:ack_qhandler = "botright copen 15"
    " 在QuickFix窗口使用快捷键以后，自动关闭QuickFix窗口
      let g:ack_autoclose = 0
    " 使用ack的空白搜索，即不添加任何参数时对光标下的单词进行搜索，默认值为1，表示开启，置0以后使用空白搜索将返回错误信息
      let g:ack_use_cword_for_empty_search = 1
    " 部分功能受限，但对于大项目搜索速度较慢时可以尝试开启
    " let g:ack_use_dispatch = 1
    " using location list allows quick navigation using [l and ]l
      cnoreabbrev ag LAck!
      let g:ack_mappings = {
      \ "t": "<C-W><CR><C-W>T",
      \ "T": "<C-W><CR><C-W>TgT<C-W>j",
      \ "o": "<CR>",
      \ "O": "<CR><C-W>p<C-W>c",
      \ "go": "<CR><C-W>p",
      \ "h": "<C-W><CR><C-W>K",
      \ "H": "<C-W><CR><C-W>K<C-W>b",
      \ "v": "<C-W><CR><C-W>H<C-W>b<C-W>J<C-W>t",
      \ "gv": "<C-W><CR><C-W>H<C-W>b<C-W>J" }
    endif

    " ctrlpfunky
    " ctrlp插件1 - 不用ctag进行函数快速跳转
    nnoremap <Leader>fu :CtrlPFunky<Cr>
    " narrow the list down with a word under cursor
    nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
    let g:ctrlp_funky_syntax_highlight = 1

    let g:ctrlp_extensions = ['funky']
" }}}


" ctrlsf {{{
    nmap \ <Plug>CtrlSFCwordPath<CR>
    " let g:ctrlsf_position = 'below'
    " let g:ctrlsf_winsize = '30%'
    let g:ctrlsf_auto_close = 0
    let g:ctrlsf_confirm_save = 0
    " Note: cannot use <CR> or <C-m> for open
    " Use : <sapce> or <tab>
    let g:ctrlsf_mapping = {
        \ "open"  : "<Space>",
        \ "openb" : "O",
        \ "tab"   : "t",
        \ "tabb"  : "T",
        \ "prevw" : "p",
        \ "quit"  : "q",
        \ "next"  : "<C-J>",
        \ "prev"  : "<C-K>",
        \ "pquit" : "q",
        \ }
" }}}

" git.  git操作还是习惯命令行,vim里面处理简单diff编辑操作

" fugitive {{{
    " :Gdiff  :Gstatus :Gvsplit
    nnoremap <leader>gb :Gblame<CR>
    nnoremap <leader>gc :Gcommit<CR>
    nnoremap <leader>ge :Gdiff<CR>
    nnoremap <leader>gl :Glog<CR>
    nnoremap <leader>gs :Gstatus<CR>
    " not ready to open
    " <leader>gd maps to :Gdiff<CR>  和现有冲突
" }}}

" gitgutter {{{
    let g:gitgutter_map_keys = 0
    let g:gitgutter_enabled = 1
    let g:gitgutter_highlight_lines = 1
    " nnoremap <leader>gs :GitGutterToggle<CR>

    nnoremap <leader>hu :GitGutterUndoHunk<CR>
    nnoremap <leader>hp :GitGutterPreviewHunk<CR>
    nnoremap <Leader>hj :GitGutterPrevHunk<CR>
    nnoremap <Leader>hk :GitGutterNextHunk<CR>
" }}}

" ################### 显示增强 ###################

" airline {{{
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '❯'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '❮'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'

    let g:airline_powerline_fonts = 1
    let g:airline_theme = 'wombat'

    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
    let g:airline#extensions#tabline#show_buffers = 0
    " let g:airline#extensions#tabline#show_tab_count = 1
    " let g:airline#extensions#tabline#switch_buffers_and_tabs = 1

    let g:airline#extensions#ale#enabled = 1
    " let g:airline#extensions#languageclient#enabled = 1
" }}}


" rainbow_parentheses {{{
    " 不加入这行, 防止黑色括号出现, 很难识别
    " \ ['black',       'SeaGreen3'],
    let g:rbpt_colorpairs = [
        \ ['brown',       'RoyalBlue3'],
        \ ['Darkblue',    'SeaGreen3'],
        \ ['darkgray',    'DarkOrchid3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['brown',       'firebrick3'],
        \ ['gray',        'RoyalBlue3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['Darkblue',    'firebrick3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkcyan',    'SeaGreen3'],
        \ ['darkred',     'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]

    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
" }}}


" ################### 显示增强-主题 ###################"

" solarized {{{
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    " let g:solarized_termcolors=256
" }}}

" molokai {{{
    " monokai原始背景色
    let g:molokai_original = 1
    let g:rehash256 = 1
" }}}

" ################### 快速导航 ###################

" nerdtree nerdtreetabs {{{
    " map <leader>n :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[
        \ '\.pyc$',
        \ '\.pyo$',
        \ '\.obj$',
        \ '\.o$',
        \ '\.so$',
        \ '\.egg$',
        \ '\.DS_Store$',
        \ '^\.git$[[dir]]',
        \ '^\.vscode$[[dir]]',
        \ '^\.svn$[[dir]]',
        \ '^\.hg$[[dir]]',
        \ '^__pycache__$[[dir]]',
        \ '\.idea$[[dir]]',
        \ '^\.cache$[[dir]]',
        \ '_cache$[[dir]]',
        \ '\.egg-info$[[dir]]',
    \ ]
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'
    " fix Nerdtree ^G before folder and file names OSX terminal vim
    let g:NERDTreeNodeDelimiter = "\u00a0"

    " nerdtreetabs
    map <Leader>n <plug>NERDTreeTabsToggle<CR>
    map <Leader>f :NERDTreeFind<CR>
    " 关闭同步
    " let g:nerdtree_tabs_synchronize_view=1
    " let g:nerdtree_tabs_synchronize_focus=1
    " 是否自动开启nerdtree
    " thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:nerdtree_tabs_open_on_gui_startup=0

    let g:NERDTreeShowHidden = 1

    " NERDTREE-GIT
    " Special characters
    let g:NERDTreeGitStatusIndicatorMapCustom = {
        \ "Modified"  : "✹",
        \ "Staged"    : "✚",
        \ "Untracked" : "✭",
        \ "Renamed"   : "➜",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖",
        \ "Dirty"     : "✗",
        \ "Clean"     : "✔︎",
        \ 'Ignored'   : '☒',
        \ "Unknown"   : "?"
    \ }

    let g:webdevicons_enable = 1
    let g:webdevicons_enable_vimfiler = 0
    let g:webdevicons_enable_airline_tabline = 1
    let g:webdevicons_enable_airline_statusline = 1
    let g:webdevicons_enable_ctrlp = 1
    let g:webdevicons_enable_startify = 1
    let g:webdevicons_enable_flagship_statusline = 1
    let g:webdevicons_conceal_nerdtree_brackets = 1
    let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
    let g:WebDevIconsNerdTreeGitPluginForceVAlign = 0
    let g:WebDevIconsTabAirLineAfterGlyphPadding = ' '
    let g:WebDevIconsTabAirLineBeforeGlyphPadding = ' '
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    autocmd FileType nerdtree setlocal signcolumn=no
" }}}


" Vim Workspace Controller
" ctrlspace {{{
    let g:airline_exclude_preview = 1
    let g:CtrlSpaceDefaultMappingKey = "<C-space> "
    hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
    hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
    hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
    hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8
" }}}


" 标签导航
" tagbar {{{
    nmap <F9> :TagbarToggle<CR>
    let g:tagbar_autofocus = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_show_visibility = 1
    " for ruby
    let g:tagbar_type_ruby = {
        \ 'kinds' : [
            \ 'm:modules',
            \ 'c:classes',
            \ 'd:describes',
            \ 'C:contexts',
            \ 'f:methods',
            \ 'F:singleton methods'
        \ ]
    \ }
" }}}


" ################### 语言相关 ###################

" quickrun {{{
    let g:quickrun_config = {
    \   "_" : {
    \       "outputter" : "message",
    \   },
    \}

    let g:quickrun_no_default_key_mappings = 1
    nmap <Leader>r <Plug>(quickrun)
    map <F10> :QuickRun<CR>
" }}}


" pythonsyntax {{{
    let python_highlight_all = 1
" }}}


" markdown {{{
    let g:vim_markdown_folding_disabled=1
" }}}


" javascript {{{
    " pangloss/vim-javascript
    let g:html_indent_inctags = "html,body,head,tbody"
    let g:html_indent_script1 = "inc"
    let g:html_indent_style1 = "inc"
" }}}

" json {{{
    let g:vim_json_syntax_conceal = 0
" }}}

" css {{{
" }}}


" ####### temp #######

" beta {{{
    " Plug 'posva/vim-vue'

    " Plug 'millermedeiros/vim-esformatter'
    " will run esformatter after pressing <leader> followed by the 'e' and 's'
    " keys
    " nnoremap <silent> <leader>es :Esformatter<CR>
    " vnoremap <silent> <leader>es :EsformatterVisual<CR>

" }}}

"------------------------------------------- end of configs --------------------------------------------
