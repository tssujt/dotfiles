" ==========================================
" bundle 插件管理和配置项
" ==========================================

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off

call plug#begin('~/.config/nvim/bundle')

" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处

" Vim HardTime
" Plug 'takac/vim-hardtime'

" Group dependencies, vim-snippets depends on ultisnips
" 代码片段快速插入 (snippets中,是代码片段资源,需要学习)
" Snippets are separated from the engine. Add this if you want them:
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" rooter
Plug 'airblade/vim-rooter'

" auto complete
" 代码自动补全
" 自动补全单引号，双引号等
Plug 'Raimondi/delimitMate'
" 自动补全html/xml标签
Plug 'docunext/closetag.vim', { 'for': ['html', 'xml'] }

" quick edit
" 快速注释
Plug 'scrooloose/nerdcommenter'


" 快速加入修改环绕字符
" for repeat -> enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'
" trailingwhitespace
" 快速去行尾空格 [, + <Space>]
Plug 'bronson/vim-trailing-whitespace'
" easyalign
" 快速赋值语句对齐
Plug 'junegunn/vim-easy-align'

" quick movement
" easymotion
" 更高效的移动 [,, + w/fx/h/j/k/l]
Plug 'Lokaltog/vim-easymotion'

" 更高效的行内移动, f/F/t/T, 才触发
" quickscope
Plug 'unblevable/quick-scope'

" Plug 'vim-scripts/matchit.zip'
" signature
" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
" m/        list all marks
" m.        add new mark just follow previous mark
Plug 'kshenoy/vim-signature'

" quick selection and edit
" expandregion
" 选中区块
Plug 'terryma/vim-expand-region'
" 多光标选中编辑
" multiplecursors
Plug 'terryma/vim-multiple-cursors'

" quick locate file or function
" 文件搜索
" change to https://github.com/ctrlpvim/ctrlp.vim
" ctrlp ctrlpfunky
Plug 'ctrlpvim/ctrlp.vim' | Plug 'tacahiroy/ctrlp-funky'
" ctrlsf
" 类似sublimetext的搜索
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
Plug 'dyng/ctrlsf.vim'
" incsearch
" Plug 'haya14busa/incsearch.vim'
" map /  <Plug>(incsearch-forward)
" map ?  <Plug>(incsearch-backward)
" map g/ <Plug>(incsearch-stay)
"
" ag
Plug 'mileszs/ack.vim'

Plug 'neovim/nvim-lspconfig'
Plug 'glepnir/lspsaga.nvim'
Plug 'Shougo/deoplete-lsp'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" git
" fugitive
Plug 'tpope/vim-fugitive'
" gitgutter
Plug 'airblade/vim-gitgutter'


" gundo
" edit history, 可以查看回到某个历史状态
Plug 'sjl/gundo.vim'

" view
" airline
" 状态栏增强展示
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" rainbow_parentheses
" 括号显示增强
Plug 'kien/rainbow_parentheses.vim'
" 主题 solarized
" solarized
Plug 'altercation/vim-colors-solarized'
" molokai
" 主题 molokai
Plug 'tomasr/molokai'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'KeitaNakamura/neodark.vim'

let g:neodark#background = '#202020'
let g:neodark#use_256color = 1
let g:neodark#solid_vertsplit = 1

" nav
" ctrlspace
Plug 'vim-ctrlspace/vim-ctrlspace'
" tagbar
Plug 'majutsushi/tagbar'

Plug 'kyazdani42/nvim-web-devicons'
Plug 'kyazdani42/nvim-tree.lua'
Plug 'romgrk/barbar.nvim'

" text object
" 支持自定义文本对象
Plug 'kana/vim-textobj-user'
" 增加行文本对象: l   dal yal cil
Plug 'kana/vim-textobj-line'
" 增加文件文本对象: e   dae yae cie
Plug 'kana/vim-textobj-entire'
" 增加缩进文本对象: i   dai yai cii - 相同缩进属于同一块
Plug 'kana/vim-textobj-indent'

Plug 'sheerun/vim-polyglot'

" tmux
" For tmux navigator Ctrl-hjkl
Plug 'christoomey/vim-tmux-navigator'

Plug 'Shougo/vimshell.vim'

" json
Plug 'elzr/vim-json', {'for': 'json'}

" css
" not work in iterm2 which termianl selection is not xterm-256, and it slow
" Plug 'ap/vim-css-color'

" ###### vim.less : less 自动更新##########
" Plug 'groenewege/vim-less'
" autocmd BufWritePost *.less :!lessc % > %:p:r.css

" ###### emmet HTML complete #########
" Plug 'mattn/emmet-vim'

" this is just for beta version
" indent
Plug 'nathanaelkane/vim-indent-guides'
" <leader>ig to trigger
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 1
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=black
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black

Plug 'ekalinin/dockerfile.vim'

Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'roxma/vim-paste-easy'

Plug 'Xuyuanp/scrollbar.nvim'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'romgrk/nvim-treesitter-context'

Plug 'sbdchd/neoformat'

" Add plugins to &runtimepath
call plug#end()

" ################### 基础 ######################

lua << EOF
    require'nvim-web-devicons'.setup {
        default = true;
    }
EOF

" rooter {{{
    let g:rooter_patterns = ['.git', 'Makefile']
" }}}

" hardtime {{{
    " let g:hardtime_default_on = 1

    " let g:hardtime_timeout = 2000

    " let g:hardtime_showmsg = 1

    " let g:hardtime_ignore_buffer_patterns = [ "NERD.*", "Tagbar.*" ]
    " let g:hardtime_ignore_quickfix = 1
    " let g:hardtime_allow_different_key = 1
    " let g:hardtime_maxcount = 10
" }}}

" fzf {{{
    let g:fzf_action = {
        \ 'ctrl-t': 'tab split',
        \ 'ctrl-x': 'split',
        \ 'ctrl-v': 'vsplit'
        \ }
" }}}

" neoformat {{{
    let g:neoformat_only_msg_on_error = 1
    let g:neoformat_enabled_python = ['black', 'isort']

    let g:neoformat_python_black = {
        \ 'exe': 'black',
        \ 'replace': 1,
        \ 'stdin': 1,
        \ 'valid_exit_codes': [0, 23],
        \ 'no_append': 1,
        \ }
    let g:neoformat_python_isort = {
        \ 'exe': 'isort',
        \ 'replace': 1,
        \ 'stdin': 1,
        \ 'valid_exit_codes': [0, 23],
        \ 'no_append': 1,
        \ }

    " autocmd BufWritePre *.py execute ':Neoformat'
" }}}

" ################### 自动补全 ###################

set scl=no
nnoremap <silent> gd <cmd>vsplit <bar> lua vim.lsp.buf.definition()<CR>
nnoremap <silent> gp <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> <C-c>rr <cmd>lua vim.lsp.buf.rename()<CR>

" https://github.com/neovim/nvim-lsp#pyls
" https://www.xgithub.com/2019/11/14/neovim-nvim-lsp-common-configurations-for-neovim-language-servers/
          " args = {'--disable=bare-except,wildcard-import,too-many-public-methods,redefined-outer-name,expression-not-assigned,redefined-builtin,subprocess-run-check,too-many-instance-attributes,import-outside-toplevel,broad-except,logging-not-lazy,too-many-return-statements,C0111,R0903,too-many-arguments,multiple-statements,too-many-statements,too-many-locals,invalid-name,fixme,logging-fstring-interpolation,line-too-long,no-member,inconsistent-return-statements,too-many-lines,unused-argument,no-self-use'},
lua << EOF
local nvim_lsp = require'lspconfig'
nvim_lsp.pyls.setup{
  settings = {
    pyls = {
      plugins = {
        pylint = {
          enabled = false,
        },
        pycodestyle = {
          enabled = true,
          ignore = {'E402', 'E501', 'E722', 'E731', 'E225', 'E203', 'E702', 'F811', 'F405', 'F403', 'W391', 'F401', 'W503', 'W504', 'W291'},
          addIgnore = {'E402', 'E501', 'E722', 'E731', 'E225', 'E203', 'E702', 'F811', 'F405', 'F403', 'W391', 'F401', 'W503', 'W504', 'W291'},
          maxLineLength = 88,
        },
        pyflakes = {
          enabled = false,
        }
      },
      rope = {
        ropeFolder = {'.'}
      }
    }
  }
}
EOF
" }

" treesitter {{{
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained",
  highlight = {
    enable = true,
    disable = { "c", "rust" }
  },
}
require'treesitter-context.config'.setup{
    enable = true
}
EOF
" }}}

" deoplete {{{
    let g:deoplete#enable_at_startup = 1
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
        return deoplete#close_popup() . "\<CR>"
    endfunction
    " use tab / shift-tab to cycle through candidates
    inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
    inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
    call deoplete#custom#var('buffer', 'require_same_filetype', v:false)
    " call deoplete#custom#source('_', 'matchers', ['matcher_cpsm'])
    " call deoplete#custom#source('_', 'sorters', [])
    call deoplete#custom#source('_', 'matchers', ['matcher_full_fuzzy'])
    call deoplete#custom#option({
                \ 'auto_complete_delay': 0,
                \ 'auto_refresh_delay': 1,
                \ 'smart_case': v:true,
                \ 'async_timeout': 150,
                \ 'on_insert_enter': v:false,
                \ 'min_pattern_length': 1,
                \ 'profile': v:true,
                \ })
    let g:deoplete#lsp#use_icons_for_candidates = v:true
    let g:deoplete#lsp#handler_enabled = v:false
    call deoplete#enable_logging('DEBUG', '/tmp/deoplete.log')
    " call deoplete#custom#source('LanguageClient', 'is_debug_enabled', v:true)

    " see https://muunyblue.github.io/520bae6649b42ff5a3c8c58b7fcfc5a9.html
    call deoplete#custom#option('sources', {
        \ '_': ['file', 'around', 'buffer', 'ultisnips', 'lsp'],
        \ 'vue': ['file', 'around', 'ultisnips', 'lsp', 'buffer'],
        \ 'sh': ['file', 'around', 'ultisnips', 'buffer', 'lsp'],
        \ 'lua': ['file', 'around', 'ultisnips', 'buffer', 'lsp'],
        \ 'dockerfile': ['file', 'around', 'ultisnips', 'buffer', 'lsp'],
        \})
    " automatically close the scratch window
    " see https://gregjs.com/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/
    " autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
" }}}

" ultisnips {{{
    " let g:UltiSnipsExpandTrigger       = "<tab>"
    " let g:UltiSnipsJumpForwardTrigger  = "<tab>"
    " let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
    " let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
    " let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
    " " 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
    " " 进入对应filetype的snippets进行编辑
    " map <leader>us :UltiSnipsEdit<CR>

    " " ctrl+j/k 进行选择
    " func! g:JInYCM()
    "     if pumvisible()
    "         return "\<C-n>"
    "     else
    "         return "\<c-j>"
    "     endif
    " endfunction

    " func! g:KInYCM()
    "     if pumvisible()
    "         return "\<C-p>"
    "     else
    "         return "\<c-k>"
    "     endif
    " endfunction
    " inoremap <c-j> <c-r>=g:JInYCM()<cr>
    " au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
    " let g:UltiSnipsJumpBackwordTrigger = "<c-k>"
" }}}


" delimitMate {{{
    " for python docstring ",优化输入
    au FileType python let b:delimitMate_nesting_quotes = ['"']
    au FileType php let delimitMate_matchpairs = "(:),[:],{:}"
    " 关闭某些类型文件的自动补全
    "au FileType mail let b:delimitMate_autoclose = 0
" }}}


" closetag {{{
    let g:closetag_html_style=1
" }}}

" ################### 快速编码 ###################

" nerdcommenter {{{
    let g:NERDSpaceDelims=1
    let g:NERDAltDelims_python = 1
" }}}

" trailingwhitespace {{{
    map <leader><space> :FixWhitespace<cr>
" }}}

" easyalign {{{
    vmap <Leader>a <Plug>(EasyAlign)
    nmap <Leader>a <Plug>(EasyAlign)
    if !exists('g:easy_align_delimiters')
        let g:easy_align_delimiters = {}
    endif
    let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
    " Default:
    " If a delimiter is in a highlight group whose name matches any of the followings, it will be ignored.
    let g:easy_align_ignore_groups = ['Comment', 'String']
" }}}

" ################### 快速移动 ###################

" easymotion {{{
    let g:EasyMotion_smartcase = 1
    " let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
    map <Leader><Leader>h <Plug>(easymotion-linebackward)
    map <Leader><Leader>j <Plug>(easymotion-j)
    map <Leader><Leader>k <Plug>(easymotion-k)
    map <Leader><Leader>l <Plug>(easymotion-lineforward)
    " 重复上一次操作, 类似repeat插件, 很强大
    map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}


" quickscope {{{
    let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
    augroup MyQuickScope
      autocmd!
      autocmd FileType nerdtree,buffergator,tagbar,qf let b:qs_local_disable=1
    augroup END
    " macvim/gvim会有问题, 暂时注解
    " let g:qs_first_occurrence_highlight_color = '#afff5f' " gui vim
    " let g:qs_first_occurrence_highlight_color = 155       " terminal vim
    " let g:qs_second_occurrence_highlight_color = '#5fffff'  " gui vim
    " let g:qs_second_occurrence_highlight_color = 81         " terminal vim
" }}}

" ################### 快速选中 ###################

" expandregion {{{
    " map + <Plug>(expand_region_expand)
    " map _ <Plug>(expand_region_shrink)
    vmap v <Plug>(expand_region_expand)
    vmap V <Plug>(expand_region_shrink)
    " Extend the global default
    if exists("*expand_region#custom_text_objects")
        call expand_region#custom_text_objects({
        \ 'a]' :1,
        \ 'ab' :1,
        \ 'aB' :1,
        \ 'ii' :0,
        \ 'ai' :0,
        \ })
    endif

" }}}

" multiplecursors {{{
    let g:multi_cursor_use_default_mapping=0
    " Default mapping
    let g:multi_cursor_next_key='<C-m>'
    let g:multi_cursor_prev_key='<C-p>'
    let g:multi_cursor_skip_key='<C-x>'
    let g:multi_cursor_quit_key='<Esc>'
" }}}

" ################### 功能相关 ###################

" ctrlp ctrlpfunky{{{
    let g:ctrlp_map = '<leader>p'
    let g:ctrlp_cmd = 'CtrlP'
    map <leader>mru :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
        \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
        \ }
    let g:ctrlp_show_hidden = 1
    let g:ctrlp_working_path_mode=0
    let g:ctrlp_match_window_bottom=1
    let g:ctrlp_max_height=15
    let g:ctrlp_match_window_reversed=0
    let g:ctrlp_mruf_max=500
    let g:ctrlp_follow_symlinks=1
    " 如果安装了ag, 使用ag
    noremap <Leader>c :Ack!<Space>
    noremap <Leader>a :Ack <cword><cr>
    if executable('ag')
    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
      let g:ctrlp_user_command = 'rg %s --files --hidden --color=never --glob ""'
    " ag is fast enough that CtrlP doesn't need to cache
    " let g:ctrlp_use_caching = 0
      let g:ackprg = 'rg --vimgrep --color never --column'
    " <Leader>c进行搜索，同时不自动打开第一个匹配的文件"
    " 高亮搜索关键词
      let g:ackhighlight = 1
    " 修改快速预览窗口高度为15
      let g:ack_qhandler = "botright copen 15"
    " 在QuickFix窗口使用快捷键以后，自动关闭QuickFix窗口
      let g:ack_autoclose = 0
    " 使用ack的空白搜索，即不添加任何参数时对光标下的单词进行搜索，默认值为1，表示开启，置0以后使用空白搜索将返回错误信息
      let g:ack_use_cword_for_empty_search = 1
    " 部分功能受限，但对于大项目搜索速度较慢时可以尝试开启
    " let g:ack_use_dispatch = 1
    " using location list allows quick navigation using [l and ]l
      cnoreabbrev ag LAck!
      let g:ack_mappings = {
      \ "t": "<C-W><CR><C-W>T",
      \ "T": "<C-W><CR><C-W>TgT<C-W>j",
      \ "o": "<CR>",
      \ "O": "<CR><C-W>p<C-W>c",
      \ "go": "<CR><C-W>p",
      \ "h": "<C-W><CR><C-W>K",
      \ "H": "<C-W><CR><C-W>K<C-W>b",
      \ "v": "<C-W><CR><C-W>H<C-W>b<C-W>J<C-W>t",
      \ "gv": "<C-W><CR><C-W>H<C-W>b<C-W>J" }
    endif

    " ctrlpfunky
    " ctrlp插件1 - 不用ctag进行函数快速跳转
    nnoremap <Leader>fu :CtrlPFunky<Cr>
    " narrow the list down with a word under cursor
    nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
    let g:ctrlp_funky_syntax_highlight = 1

    let g:ctrlp_extensions = ['funky']
" }}}


" ctrlsf {{{
    nmap \ <Plug>CtrlSFCwordPath<CR>
    " let g:ctrlsf_position = 'below'
    " let g:ctrlsf_winsize = '30%'
    let g:ctrlsf_auto_close = 0
    let g:ctrlsf_confirm_save = 0
    " Note: cannot use <CR> or <C-m> for open
    " Use : <sapce> or <tab>
    let g:ctrlsf_mapping = {
        \ "open"  : "<Space>",
        \ "openb" : "O",
        \ "tab"   : "t",
        \ "tabb"  : "T",
        \ "prevw" : "p",
        \ "quit"  : "q",
        \ "next"  : "<C-J>",
        \ "prev"  : "<C-K>",
        \ "pquit" : "q",
        \ }
" }}}

" fugitive {{{
    " :Gdiff  :Gstatus :Gvsplit
    nnoremap <leader>gb :Gblame<CR>
    nnoremap <leader>gc :Gcommit<CR>
    nnoremap <leader>ge :Gdiff<CR>
    nnoremap <leader>gl :Glog<CR>
    nnoremap <leader>gs :Gstatus<CR>
    " not ready to open
    " <leader>gd maps to :Gdiff<CR>  和现有冲突
" }}}

" gitgutter {{{
    let g:gitgutter_map_keys = 0
    let g:gitgutter_enabled = 1
    let g:gitgutter_highlight_lines = 1
    " nnoremap <leader>gs :GitGutterToggle<CR>

    nnoremap <leader>hu :GitGutterUndoHunk<CR>
    nnoremap <leader>hp :GitGutterPreviewHunk<CR>
    nnoremap <Leader>hj :GitGutterPrevHunk<CR>
    nnoremap <Leader>hk :GitGutterNextHunk<CR>
" }}}

" ################### 显示增强 ###################

" airline {{{
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '❯'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '❮'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'

    let g:airline_powerline_fonts = 1
    let g:airline_theme = 'wombat'

    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
    let g:airline#extensions#tabline#show_buffers = 0
    " let g:airline#extensions#tabline#show_tab_count = 1
    " let g:airline#extensions#tabline#switch_buffers_and_tabs = 1
" }}}


" rainbow_parentheses {{{
    " 不加入这行, 防止黑色括号出现, 很难识别
    " \ ['black',       'SeaGreen3'],
    let g:rbpt_colorpairs = [
        \ ['brown',       'RoyalBlue3'],
        \ ['Darkblue',    'SeaGreen3'],
        \ ['darkgray',    'DarkOrchid3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['brown',       'firebrick3'],
        \ ['gray',        'RoyalBlue3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['Darkblue',    'firebrick3'],
        \ ['darkgreen',   'RoyalBlue3'],
        \ ['darkcyan',    'SeaGreen3'],
        \ ['darkred',     'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]

    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
" }}}


" ################### 显示增强-主题 ###################"

" solarized {{{
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    " let g:solarized_termcolors=256
" }}}

" molokai {{{
    " monokai原始背景色
    let g:molokai_original = 1
    let g:rehash256 = 1
" }}}

" ################### 快速导航 ###################

" barbar {{{
    function! s:CloseBufferOrPane() abort
        if &bufhidden == 'unload' || &bufhidden == 'delete' || &bufhidden == 'wipe'
            quit
            return
        endif
        " if we're in a non-normal or floating window: quit
        if win_gettype(0) != '' || nvim_win_get_config(0)['relative'] != ''
            quit
            return
        endif

        let i = 1
        let last_window = winnr('$')
        let count = 0
        let in_main_window = v:false
        while i <= last_window
        " Ignore non-normal (e.g. popup/preview) windows
            if empty(win_gettype(i)) && !getwinvar(i, 'treesitter_context')
                let bufnr = winbufnr(i)
                let ft = getbufvar(bufnr, '&filetype')
                let bt = getbufvar(bufnr, '&buftype')
                " Ignore prompt & quickfix buffer windows
                if bt != 'quickfix' && bt != 'prompt' && bt != 'help' && ft != 'aerial'
                    let count += 1
                    if i == winnr()
                        let in_main_window = v:true
                    endif
                endif
            endif
            let i += 1
        endwhile

        if count > 1 || !in_main_window
            quit
        else
            " Close other windows (e.g. treesitter-context floating window) so we don't get the 'only floating window would remain' error
            silent wincmd o
            BufferClose
        endif
    endfunction

    let bufferline = get(g:, 'bufferline', {})
    let bufferline.closable = v:true
    let bufferline.animation = v:true
    let bufferline.icons = 'both'

    " Enable/disable auto-hiding the tab bar when there is a single buffer
    let bufferline.auto_hide = v:false

    " Enable/disable current/total tabpages indicator (top right corner)
    let bufferline.tabpages = v:true

    " Enables/disable clickable tabs
    "  - left-click: go to buffer
    "  - middle-click: delete buffer
    let bufferline.clickable = v:true

    " Sets the icon's highlight group.
    " If false, will use nvim-web-devicons colors
    let bufferline.icon_custom_colors = v:false

    " Configure icons on the bufferline.
    let bufferline.icon_separator_active = '▎'
    let bufferline.icon_separator_inactive = '▎'
    let bufferline.icon_close_tab = ''
    let bufferline.icon_close_tab_modified = '●'

    " Sets the maximum padding width with which to surround each tab.
    let bufferline.maximum_padding = 4

    " Sets the maximum buffer name length.
    let bufferline.maximum_length = 30

    " If set, the letters for each buffer in buffer-pick mode will be
    " assigned based on their name. Otherwise or in case all letters are
    " already assigned, the behavior is to assign letters in order of
    " usability (see order below)
    let bufferline.semantic_letters = v:true

    " New buffer letters are assigned in this order. This order is
    " optimal for the qwerty keyboard layout but might need adjustement
    " for other layouts.
    let bufferline.letters =
    \ 'asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERUTYQP'

    " Sets the name of unnamed buffers. By default format is "[Buffer X]"
    " where X is the buffer number. But only a static string is accepted here.
    let bufferline.no_name_title = v:null

    nnoremap <leader>bm :BufferMove
    nnoremap <silent> <leader>bi <cmd>BufferPin<CR>
    nnoremap <silent> <leader>bo <cmd>BufferOrderByTime<CR>
    nnoremap <silent> <leader>1 <cmd>BufferGoto 1<CR>
    nnoremap <silent> <leader>2 <cmd>BufferGoto 2<CR>
    nnoremap <silent> <leader>3 <cmd>BufferGoto 3<CR>
    nnoremap <silent> <leader>4 <cmd>BufferGoto 4<CR>
    nnoremap <silent> <leader>5 <cmd>BufferGoto 5<CR>
    nnoremap <silent> <leader>6 <cmd>BufferGoto 6<CR>
    nnoremap <silent> <leader>7 <cmd>BufferGoto 7<CR>
    nnoremap <silent> <leader>8 <cmd>BufferGoto 8<CR>
    nnoremap <silent> <leader>9 <cmd>BufferGoto 9<CR>
    nnoremap <silent> <leader>` <cmd>BufferLast<CR>
    nnoremap <silent> <leader>o <cmd>BufferCloseAllButCurrent<CR>
    " nnoremap <silent> <leader>c <cmd>call <sid>CloseBufferOrPane()<CR>
    nnoremap <silent> <leader>C <cmd>BufferClose<CR>
" }}}

" tree {{{
    let g:nvim_tree_side = 'left' "left by default
    let g:nvim_tree_width = 30 "30 by default
    let g:nvim_tree_ignore = [
        \ '.git',
        \ 'node_modules',
        \ '.cache',
        \ '.vscode',
        \ '.idea',
        \ '__pycache__',
        \ ] "empty by default
    let g:nvim_tree_gitignore = 1 "0 by default
    let g:nvim_tree_auto_open = 1 "0 by default, opens the tree when typing `vim $DIR` or `vim`
    let g:nvim_tree_auto_close = 0 "0 by default, closes the tree when it's the last window
    let g:nvim_tree_auto_ignore_ft = [ 'startify', 'dashboard' ] "empty by default, don't auto open tree on specific filetypes.
    let g:nvim_tree_quit_on_open = 1 "0 by default, closes the tree when you open a file
    let g:nvim_tree_follow = 1 "0 by default, this option allows the cursor to be updated when entering a buffer
    let g:nvim_tree_indent_markers = 1 "0 by default, this option shows indent markers when folders are open
    let g:nvim_tree_hide_dotfiles = 0 "0 by default, this option hides files and folders starting with a dot `.`
    let g:nvim_tree_git_hl = 1 "0 by default, will enable file highlight for git attributes (can be used without the icons).
    let g:nvim_tree_highlight_opened_files = 1 "0 by default, will enable folder and file icon highlight for opened files/directories.
    let g:nvim_tree_root_folder_modifier = ':~' "This is the default. See :help filename-modifiers for more options
    let g:nvim_tree_tab_open = 1 "0 by default, will open the tree when entering a new tab and the tree was previously open
    let g:nvim_tree_width_allow_resize  = 1 "0 by default, will not resize the tree when opening a file
    let g:nvim_tree_disable_netrw = 1 "1 by default, disables netrw
    let g:nvim_tree_hijack_netrw = 1 "1 by default, prevents netrw from automatically opening when opening directories (but lets you keep its other utilities)
    let g:nvim_tree_add_trailing = 1 "0 by default, append a trailing slash to folder names
    let g:nvim_tree_group_empty = 1 " 0 by default, compact folders that only contain a single folder into one node in the file tree
    let g:nvim_tree_lsp_diagnostics = 1 "0 by default, will show lsp diagnostics in the signcolumn. See :help nvim_tree_lsp_diagnostics
    let g:nvim_tree_disable_window_picker = 0 "0 by default, will disable the window picker.
    let g:nvim_tree_hijack_cursor = 0 "1 by default, when moving cursor in the tree, will position the cursor at the start of the file on the current line
    let g:nvim_tree_icon_padding = '  ' "one space by default, used for rendering the space between the icon and the filename. Use with caution, it could break rendering if you set an empty string depending on your font.
    let g:nvim_tree_update_cwd = 1 "0 by default, will update the tree cwd when changing nvim's directory (DirChanged event). Behaves strangely with autochdir set.
    let g:nvim_tree_window_picker_exclude = {
        \   'filetype': [
        \     'packer',
        \     'qf'
        \   ],
        \   'buftype': [
        \     'terminal'
        \   ]
        \ }
    " Dictionary of buffer option names mapped to a list of option values that
    " indicates to the window picker that the buffer's window should not be
    " selectable.
    let g:nvim_tree_special_files = { 'README.md': 1, 'Makefile': 1, 'MAKEFILE': 1 } " List of filenames that gets highlighted with NvimTreeSpecialFile
    let g:nvim_tree_show_icons = {
        \ 'git': 1,
        \ 'folders': 1,
        \ 'files': 1,
        \ 'folder_arrows': 1,
        \ }
    "If 0, do not show the icons for one of 'git' 'folder' and 'files'
    "1 by default, notice that if 'files' is 1, it will only display
    "if nvim-web-devicons is installed and on your runtimepath.
    "if folder is 1, you can also tell folder_arrows 1 to show small arrows next to the folder icons.
    "but this will not work when you set indent_markers (because of UI conflict)

    " default will show icon by default if no icon is provided
    " default shows no icon by default
    let g:nvim_tree_icons = {
        \ 'default': '',
        \ 'symlink': '',
        \ 'git': {
        \   'unstaged': "✗",
        \   'staged': "✓",
        \   'unmerged': "",
        \   'renamed': "➜",
        \   'untracked': "★",
        \   'deleted': "",
        \   'ignored': "◌"
        \   },
        \ 'folder': {
        \   'arrow_open': "",
        \   'arrow_closed': "",
        \   'default': "",
        \   'open': "",
        \   'empty': "",
        \   'empty_open': "",
        \   'symlink': "",
        \   'symlink_open': "",
        \   },
        \   'lsp': {
        \     'hint': "",
        \     'info': "",
        \     'warning': "",
        \     'error': "",
        \   }
        \ }

    nnoremap <C-n> :NvimTreeToggle<CR>
    nnoremap <leader>r :NvimTreeRefresh<CR>
    nnoremap <leader>n :NvimTreeFindFile<CR>
    " NvimTreeOpen and NvimTreeClose are also available if you need them

    set termguicolors " this variable must be enabled for colors to be applied properly

    " a list of groups can be found at `:help nvim_tree_highlight`
    highlight NvimTreeFolderIcon guibg=blue
" }}}


" Vim Workspace Controller
" ctrlspace {{{
    " let g:airline_exclude_preview = 1
    let g:CtrlSpaceDefaultMappingKey = "<C-space> "
    hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
    hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
    hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
    hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8
" }}}


" 标签导航
" tagbar {{{
    nmap <F9> :TagbarToggle<CR>
    let g:tagbar_autofocus = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_show_visibility = 1
    " for ruby
    let g:tagbar_type_ruby = {
        \ 'kinds' : [
            \ 'm:modules',
            \ 'c:classes',
            \ 'd:describes',
            \ 'C:contexts',
            \ 'f:methods',
            \ 'F:singleton methods'
        \ ]
    \ }
" }}}

" pythonsyntax {{{
    let python_highlight_all = 1
" }}}


" markdown {{{
    let g:vim_markdown_folding_disabled=1
" }}}


" javascript {{{
    " pangloss/vim-javascript
    let g:html_indent_inctags = "html,body,head,tbody"
    let g:html_indent_script1 = "inc"
    let g:html_indent_style1 = "inc"
" }}}

" json {{{
    let g:vim_json_syntax_conceal = 0
" }}}

" css {{{
" }}}


" ####### temp #######

" beta {{{
    " Plug 'posva/vim-vue'

    " Plug 'millermedeiros/vim-esformatter'
    " will run esformatter after pressing <leader> followed by the 'e' and 's'
    " keys
    " nnoremap <silent> <leader>es :Esformatter<CR>
    " vnoremap <silent> <leader>es :EsformatterVisual<CR>

" }}}
